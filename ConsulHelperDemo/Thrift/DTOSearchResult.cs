/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Taoche.ES
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DTOSearchResult : TBase
  {
    private string _carlist;
    private string _facet;
    private long _Count;
    private string _Message;
    private string _RequestParametersLog;
    private List<int> _StepCount;
    private long _TotalElapsedMilliseconds;

    public string Carlist
    {
      get
      {
        return _carlist;
      }
      set
      {
        __isset.carlist = true;
        this._carlist = value;
      }
    }

    public string Facet
    {
      get
      {
        return _facet;
      }
      set
      {
        __isset.facet = true;
        this._facet = value;
      }
    }

    public long Count
    {
      get
      {
        return _Count;
      }
      set
      {
        __isset.Count = true;
        this._Count = value;
      }
    }

    public string Message
    {
      get
      {
        return _Message;
      }
      set
      {
        __isset.Message = true;
        this._Message = value;
      }
    }

    public string RequestParametersLog
    {
      get
      {
        return _RequestParametersLog;
      }
      set
      {
        __isset.RequestParametersLog = true;
        this._RequestParametersLog = value;
      }
    }

    public List<int> StepCount
    {
      get
      {
        return _StepCount;
      }
      set
      {
        __isset.StepCount = true;
        this._StepCount = value;
      }
    }

    public long TotalElapsedMilliseconds
    {
      get
      {
        return _TotalElapsedMilliseconds;
      }
      set
      {
        __isset.TotalElapsedMilliseconds = true;
        this._TotalElapsedMilliseconds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool carlist;
      public bool facet;
      public bool Count;
      public bool Message;
      public bool RequestParametersLog;
      public bool StepCount;
      public bool TotalElapsedMilliseconds;
    }

    public DTOSearchResult() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 100:
              if (field.Type == TType.String) {
                Carlist = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 101:
              if (field.Type == TType.String) {
                Facet = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.I64) {
                Count = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Message = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                RequestParametersLog = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  StepCount = new List<int>();
                  TList _list220 = iprot.ReadListBegin();
                  for( int _i221 = 0; _i221 < _list220.Count; ++_i221)
                  {
                    int _elem222;
                    _elem222 = iprot.ReadI32();
                    StepCount.Add(_elem222);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                TotalElapsedMilliseconds = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DTOSearchResult");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Count) {
          field.Name = "Count";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Count);
          oprot.WriteFieldEnd();
        }
        if (Message != null && __isset.Message) {
          field.Name = "Message";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Message);
          oprot.WriteFieldEnd();
        }
        if (RequestParametersLog != null && __isset.RequestParametersLog) {
          field.Name = "RequestParametersLog";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RequestParametersLog);
          oprot.WriteFieldEnd();
        }
        if (StepCount != null && __isset.StepCount) {
          field.Name = "StepCount";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, StepCount.Count));
            foreach (int _iter223 in StepCount)
            {
              oprot.WriteI32(_iter223);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.TotalElapsedMilliseconds) {
          field.Name = "TotalElapsedMilliseconds";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TotalElapsedMilliseconds);
          oprot.WriteFieldEnd();
        }
        if (Carlist != null && __isset.carlist) {
          field.Name = "carlist";
          field.Type = TType.String;
          field.ID = 100;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Carlist);
          oprot.WriteFieldEnd();
        }
        if (Facet != null && __isset.facet) {
          field.Name = "facet";
          field.Type = TType.String;
          field.ID = 101;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Facet);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DTOSearchResult(");
      bool __first = true;
      if (Carlist != null && __isset.carlist) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Carlist: ");
        __sb.Append(Carlist);
      }
      if (Facet != null && __isset.facet) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Facet: ");
        __sb.Append(Facet);
      }
      if (__isset.Count) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Count: ");
        __sb.Append(Count);
      }
      if (Message != null && __isset.Message) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Message: ");
        __sb.Append(Message);
      }
      if (RequestParametersLog != null && __isset.RequestParametersLog) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequestParametersLog: ");
        __sb.Append(RequestParametersLog);
      }
      if (StepCount != null && __isset.StepCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StepCount: ");
        __sb.Append(StepCount);
      }
      if (__isset.TotalElapsedMilliseconds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TotalElapsedMilliseconds: ");
        __sb.Append(TotalElapsedMilliseconds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
