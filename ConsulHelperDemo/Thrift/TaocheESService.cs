/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Taoche.ES
{
  public partial class TaocheESService {
    public interface ISync {
      DTOSearchResult SearchTaocheCar(DTOSearchCondition param);
      DTOSearchResult SearchJDCar(DTOSearchCondition param);
      DTOSearchResult SearchCPCCar(DTOSearchCondition param);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_SearchTaocheCar(AsyncCallback callback, object state, DTOSearchCondition param);
      DTOSearchResult End_SearchTaocheCar(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SearchJDCar(AsyncCallback callback, object state, DTOSearchCondition param);
      DTOSearchResult End_SearchJDCar(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SearchCPCCar(AsyncCallback callback, object state, DTOSearchCondition param);
      DTOSearchResult End_SearchCPCCar(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_SearchTaocheCar(AsyncCallback callback, object state, DTOSearchCondition param)
      {
        return send_SearchTaocheCar(callback, state, param);
      }

      public DTOSearchResult End_SearchTaocheCar(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SearchTaocheCar();
      }

      #endif

      public DTOSearchResult SearchTaocheCar(DTOSearchCondition param)
      {
        #if !SILVERLIGHT
        send_SearchTaocheCar(param);
        return recv_SearchTaocheCar();

        #else
        var asyncResult = Begin_SearchTaocheCar(null, null, param);
        return End_SearchTaocheCar(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SearchTaocheCar(AsyncCallback callback, object state, DTOSearchCondition param)
      #else
      public void send_SearchTaocheCar(DTOSearchCondition param)
      #endif
      {
          TSocket obj = (TSocket) oprot_.Transport;
          var obj1 = obj;
          
        oprot_.WriteMessageBegin(new TMessage("SearchTaocheCar", TMessageType.Call, seqid_));
        SearchTaocheCar_args args = new SearchTaocheCar_args();
        args.Param = param;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DTOSearchResult recv_SearchTaocheCar()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SearchTaocheCar_result result = new SearchTaocheCar_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SearchTaocheCar failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SearchJDCar(AsyncCallback callback, object state, DTOSearchCondition param)
      {
        return send_SearchJDCar(callback, state, param);
      }

      public DTOSearchResult End_SearchJDCar(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SearchJDCar();
      }

      #endif

      public DTOSearchResult SearchJDCar(DTOSearchCondition param)
      {
        #if !SILVERLIGHT
        send_SearchJDCar(param);
        return recv_SearchJDCar();

        #else
        var asyncResult = Begin_SearchJDCar(null, null, param);
        return End_SearchJDCar(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SearchJDCar(AsyncCallback callback, object state, DTOSearchCondition param)
      #else
      public void send_SearchJDCar(DTOSearchCondition param)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SearchJDCar", TMessageType.Call, seqid_));
        SearchJDCar_args args = new SearchJDCar_args();
        args.Param = param;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DTOSearchResult recv_SearchJDCar()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SearchJDCar_result result = new SearchJDCar_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SearchJDCar failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SearchCPCCar(AsyncCallback callback, object state, DTOSearchCondition param)
      {
        return send_SearchCPCCar(callback, state, param);
      }

      public DTOSearchResult End_SearchCPCCar(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SearchCPCCar();
      }

      #endif

      public DTOSearchResult SearchCPCCar(DTOSearchCondition param)
      {
        #if !SILVERLIGHT
        send_SearchCPCCar(param);
        return recv_SearchCPCCar();

        #else
        var asyncResult = Begin_SearchCPCCar(null, null, param);
        return End_SearchCPCCar(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SearchCPCCar(AsyncCallback callback, object state, DTOSearchCondition param)
      #else
      public void send_SearchCPCCar(DTOSearchCondition param)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SearchCPCCar", TMessageType.Call, seqid_));
        SearchCPCCar_args args = new SearchCPCCar_args();
        args.Param = param;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public DTOSearchResult recv_SearchCPCCar()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SearchCPCCar_result result = new SearchCPCCar_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SearchCPCCar failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["SearchTaocheCar"] = SearchTaocheCar_Process;
        processMap_["SearchJDCar"] = SearchJDCar_Process;
        processMap_["SearchCPCCar"] = SearchCPCCar_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void SearchTaocheCar_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SearchTaocheCar_args args = new SearchTaocheCar_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SearchTaocheCar_result result = new SearchTaocheCar_result();
        try
        {
          result.Success = iface_.SearchTaocheCar(args.Param);
          oprot.WriteMessageBegin(new TMessage("SearchTaocheCar", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SearchTaocheCar", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SearchJDCar_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SearchJDCar_args args = new SearchJDCar_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SearchJDCar_result result = new SearchJDCar_result();
        try
        {
          result.Success = iface_.SearchJDCar(args.Param);
          oprot.WriteMessageBegin(new TMessage("SearchJDCar", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SearchJDCar", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SearchCPCCar_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SearchCPCCar_args args = new SearchCPCCar_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SearchCPCCar_result result = new SearchCPCCar_result();
        try
        {
          result.Success = iface_.SearchCPCCar(args.Param);
          oprot.WriteMessageBegin(new TMessage("SearchCPCCar", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SearchCPCCar", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SearchTaocheCar_args : TBase
    {
      private DTOSearchCondition _param;

      public DTOSearchCondition Param
      {
        get
        {
          return _param;
        }
        set
        {
          __isset.param = true;
          this._param = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool param;
      }

      public SearchTaocheCar_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Param = new DTOSearchCondition();
                  Param.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SearchTaocheCar_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Param != null && __isset.param) {
            field.Name = "param";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Param.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SearchTaocheCar_args(");
        bool __first = true;
        if (Param != null && __isset.param) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Param: ");
          __sb.Append(Param== null ? "<null>" : Param.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SearchTaocheCar_result : TBase
    {
      private DTOSearchResult _success;

      public DTOSearchResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SearchTaocheCar_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DTOSearchResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SearchTaocheCar_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SearchTaocheCar_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SearchJDCar_args : TBase
    {
      private DTOSearchCondition _param;

      public DTOSearchCondition Param
      {
        get
        {
          return _param;
        }
        set
        {
          __isset.param = true;
          this._param = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool param;
      }

      public SearchJDCar_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Param = new DTOSearchCondition();
                  Param.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SearchJDCar_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Param != null && __isset.param) {
            field.Name = "param";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Param.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SearchJDCar_args(");
        bool __first = true;
        if (Param != null && __isset.param) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Param: ");
          __sb.Append(Param== null ? "<null>" : Param.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SearchJDCar_result : TBase
    {
      private DTOSearchResult _success;

      public DTOSearchResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SearchJDCar_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DTOSearchResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SearchJDCar_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SearchJDCar_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SearchCPCCar_args : TBase
    {
      private DTOSearchCondition _param;

      public DTOSearchCondition Param
      {
        get
        {
          return _param;
        }
        set
        {
          __isset.param = true;
          this._param = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool param;
      }

      public SearchCPCCar_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Param = new DTOSearchCondition();
                  Param.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SearchCPCCar_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Param != null && __isset.param) {
            field.Name = "param";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Param.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SearchCPCCar_args(");
        bool __first = true;
        if (Param != null && __isset.param) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Param: ");
          __sb.Append(Param== null ? "<null>" : Param.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SearchCPCCar_result : TBase
    {
      private DTOSearchResult _success;

      public DTOSearchResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SearchCPCCar_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new DTOSearchResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SearchCPCCar_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SearchCPCCar_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
