/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Taoche.ES
{

#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class DTOSearchCondition : TBase
    {
        private Int32 _CommonFlag;
        private int _RequestSource;
        private List<string> _ReturnFieldArray;
        private List<string> _OrderByFieldArray;
        private List<bool> _OrderByIsDESCArray;
        private int _SortBoostFlag;
        private int _PageSize;
        private int _PageIndex;
        private bool _IsHightLight;
        private double _DistanceKm;
        private string _Location;
        private bool _IsCountSearch;
        private string _RequestParametersLog;
        private string _AggrFieldList;
        private List<int> _UcarIdArray;
        private List<int> _SiteId;
        private List<int> _UcarStatusArray;
        private List<int> _NoUcarIdArray;
        private int _IsAuthenticated;
        private int _Source;
        private List<string> _CarLevelArray;
        private List<int> _UserIdArray;
        private List<int> _NoUserIdArray;
        private List<string> _UcarSerialNumberArray;
        private string _KeyWord;
        private List<int> _MainBrandArray;
        private List<int> _BrandArray;
        private List<int> _CarSerialArray;
        private List<int> _CarIDArray;
        private List<int> _GearBoxTypeArray;
        private List<string> _ColorArray;
        private int _CarSource1L;
        private int _PictureCount;
        private List<int> _BigAreaIdArray;
        private List<int> _ProvinceIdArray;
        private List<int> _CityIdArray;
        private List<int> _NoCityIdArray;
        private List<int> _RelateCityArray;
        private List<double> _PriceLowerArray;
        private List<double> _PriceHighArray;
        private List<double> _CPriceLowerArray;
        private List<double> _CPriceHighArray;
        private List<double> _B2BPriceLowerArray;
        private List<double> _B2BPriceHighArray;
        private List<int> _CarAgeLowerArray;
        private List<int> _CarAgeHighArray;
        private List<double> _ExhaustLevelLowerArray;
        private List<double> _ExhaustLevelHighArray;
        private List<int> _ExhaustLevelArray;
        private List<int> _DrivingMileageLowerArray;
        private List<int> _DrivingMileageHighArray;
        private List<int> _CountryArray;
        private int _SuperiorId;
        private List<int> _BrandAttrArray;
        private int _UserType;
        private int _IsNeglect;
        private int _IsVideo;
        private int _IsFirstPicTrue;
        private int _IsDealerRecommend;
        private List<int> _CarSourceTypeArray;
        private List<string> _CarYearArray;
        private List<long> _CreateTimeArray;
        private List<long> _PublishTimeArray;
        private List<int> _CarTypeConfig;
        private int _IsRecommendGL;
        private int _IsWarranty;
        private List<int> _WarrantyTypeArray;
        private int _IsTop;
        private int _IsActivity;
        private int _IsBangmai;
        private int _IsBangmaiche;
        private int _IsShowMr;
        private int _IsCarId;
        private int _IsB2B;
        private List<int> _EnvirStandardArray;
        private List<double> _ConsumptionLowerArray;
        private List<double> _ConsumptionHighArray;
        private List<int> _OilTypeArray;
        private List<int> _EngineLocationArray;
        private List<int> _BodyDoorsLowerArray;
        private List<int> _BodyDoorsHighArray;
        private List<int> _SeatNumLowerArray;
        private List<int> _SeatNumHighArray;
        private int _IsWagon;
        private List<int> _DriveTypeArray;
        private List<int> _CsBodyFormArray;
        private List<int> _CarLevelSecondArray;

        public Int32 CommonFlag
        {
            get
            {
                return _CommonFlag;
            }
            set
            {
                __isset.CommonFlag = true;
                this._CommonFlag = value;
            }
        }

        public int RequestSource
        {
            get
            {
                return _RequestSource;
            }
            set
            {
                __isset.RequestSource = true;
                this._RequestSource = value;
            }
        }

        public List<string> ReturnFieldArray
        {
            get
            {
                return _ReturnFieldArray;
            }
            set
            {
                __isset.ReturnFieldArray = true;
                this._ReturnFieldArray = value;
            }
        }

        public List<string> OrderByFieldArray
        {
            get
            {
                return _OrderByFieldArray;
            }
            set
            {
                __isset.OrderByFieldArray = true;
                this._OrderByFieldArray = value;
            }
        }

        public List<bool> OrderByIsDESCArray
        {
            get
            {
                return _OrderByIsDESCArray;
            }
            set
            {
                __isset.OrderByIsDESCArray = true;
                this._OrderByIsDESCArray = value;
            }
        }

        public int SortBoostFlag
        {
            get
            {
                return _SortBoostFlag;
            }
            set
            {
                __isset.SortBoostFlag = true;
                this._SortBoostFlag = value;
            }
        }

        public int PageSize
        {
            get
            {
                return _PageSize;
            }
            set
            {
                __isset.PageSize = true;
                this._PageSize = value;
            }
        }

        public int PageIndex
        {
            get
            {
                return _PageIndex;
            }
            set
            {
                __isset.PageIndex = true;
                this._PageIndex = value;
            }
        }

        public bool IsHightLight
        {
            get
            {
                return _IsHightLight;
            }
            set
            {
                __isset.IsHightLight = true;
                this._IsHightLight = value;
            }
        }

        public double DistanceKm
        {
            get
            {
                return _DistanceKm;
            }
            set
            {
                __isset.DistanceKm = true;
                this._DistanceKm = value;
            }
        }

        public string Location
        {
            get
            {
                return _Location;
            }
            set
            {
                __isset.Location = true;
                this._Location = value;
            }
        }

        public bool IsCountSearch
        {
            get
            {
                return _IsCountSearch;
            }
            set
            {
                __isset.IsCountSearch = true;
                this._IsCountSearch = value;
            }
        }

        public string RequestParametersLog
        {
            get
            {
                return _RequestParametersLog;
            }
            set
            {
                __isset.RequestParametersLog = true;
                this._RequestParametersLog = value;
            }
        }

        public string AggrFieldList
        {
            get
            {
                return _AggrFieldList;
            }
            set
            {
                __isset.AggrFieldList = true;
                this._AggrFieldList = value;
            }
        }

        public List<int> UcarIdArray
        {
            get
            {
                return _UcarIdArray;
            }
            set
            {
                __isset.UcarIdArray = true;
                this._UcarIdArray = value;
            }
        }

        public List<int> SiteId
        {
            get
            {
                return _SiteId;
            }
            set
            {
                __isset.SiteId = true;
                this._SiteId = value;
            }
        }

        public List<int> UcarStatusArray
        {
            get
            {
                return _UcarStatusArray;
            }
            set
            {
                __isset.UcarStatusArray = true;
                this._UcarStatusArray = value;
            }
        }

        public List<int> NoUcarIdArray
        {
            get
            {
                return _NoUcarIdArray;
            }
            set
            {
                __isset.NoUcarIdArray = true;
                this._NoUcarIdArray = value;
            }
        }

        public int IsAuthenticated
        {
            get
            {
                return _IsAuthenticated;
            }
            set
            {
                __isset.IsAuthenticated = true;
                this._IsAuthenticated = value;
            }
        }

        public int Source
        {
            get
            {
                return _Source;
            }
            set
            {
                __isset.Source = true;
                this._Source = value;
            }
        }

        public List<string> CarLevelArray
        {
            get
            {
                return _CarLevelArray;
            }
            set
            {
                __isset.CarLevelArray = true;
                this._CarLevelArray = value;
            }
        }

        public List<int> UserIdArray
        {
            get
            {
                return _UserIdArray;
            }
            set
            {
                __isset.UserIdArray = true;
                this._UserIdArray = value;
            }
        }

        public List<int> NoUserIdArray
        {
            get
            {
                return _NoUserIdArray;
            }
            set
            {
                __isset.NoUserIdArray = true;
                this._NoUserIdArray = value;
            }
        }

        public List<string> UcarSerialNumberArray
        {
            get
            {
                return _UcarSerialNumberArray;
            }
            set
            {
                __isset.UcarSerialNumberArray = true;
                this._UcarSerialNumberArray = value;
            }
        }

        public string KeyWord
        {
            get
            {
                return _KeyWord;
            }
            set
            {
                __isset.KeyWord = true;
                this._KeyWord = value;
            }
        }

        public List<int> MainBrandArray
        {
            get
            {
                return _MainBrandArray;
            }
            set
            {
                __isset.MainBrandArray = true;
                this._MainBrandArray = value;
            }
        }

        public List<int> BrandArray
        {
            get
            {
                return _BrandArray;
            }
            set
            {
                __isset.BrandArray = true;
                this._BrandArray = value;
            }
        }

        public List<int> CarSerialArray
        {
            get
            {
                return _CarSerialArray;
            }
            set
            {
                __isset.CarSerialArray = true;
                this._CarSerialArray = value;
            }
        }

        public List<int> CarIDArray
        {
            get
            {
                return _CarIDArray;
            }
            set
            {
                __isset.CarIDArray = true;
                this._CarIDArray = value;
            }
        }

        public List<int> GearBoxTypeArray
        {
            get
            {
                return _GearBoxTypeArray;
            }
            set
            {
                __isset.GearBoxTypeArray = true;
                this._GearBoxTypeArray = value;
            }
        }

        public List<string> ColorArray
        {
            get
            {
                return _ColorArray;
            }
            set
            {
                __isset.ColorArray = true;
                this._ColorArray = value;
            }
        }

        public int CarSource1L
        {
            get
            {
                return _CarSource1L;
            }
            set
            {
                __isset.CarSource1L = true;
                this._CarSource1L = value;
            }
        }

        public int PictureCount
        {
            get
            {
                return _PictureCount;
            }
            set
            {
                __isset.PictureCount = true;
                this._PictureCount = value;
            }
        }

        public List<int> BigAreaIdArray
        {
            get
            {
                return _BigAreaIdArray;
            }
            set
            {
                __isset.BigAreaIdArray = true;
                this._BigAreaIdArray = value;
            }
        }

        public List<int> ProvinceIdArray
        {
            get
            {
                return _ProvinceIdArray;
            }
            set
            {
                __isset.ProvinceIdArray = true;
                this._ProvinceIdArray = value;
            }
        }

        public List<int> CityIdArray
        {
            get
            {
                return _CityIdArray;
            }
            set
            {
                __isset.CityIdArray = true;
                this._CityIdArray = value;
            }
        }

        public List<int> NoCityIdArray
        {
            get
            {
                return _NoCityIdArray;
            }
            set
            {
                __isset.NoCityIdArray = true;
                this._NoCityIdArray = value;
            }
        }

        public List<int> RelateCityArray
        {
            get
            {
                return _RelateCityArray;
            }
            set
            {
                __isset.RelateCityArray = true;
                this._RelateCityArray = value;
            }
        }

        public List<double> PriceLowerArray
        {
            get
            {
                return _PriceLowerArray;
            }
            set
            {
                __isset.PriceLowerArray = true;
                this._PriceLowerArray = value;
            }
        }

        public List<double> PriceHighArray
        {
            get
            {
                return _PriceHighArray;
            }
            set
            {
                __isset.PriceHighArray = true;
                this._PriceHighArray = value;
            }
        }

        public List<double> CPriceLowerArray
        {
            get
            {
                return _CPriceLowerArray;
            }
            set
            {
                __isset.CPriceLowerArray = true;
                this._CPriceLowerArray = value;
            }
        }

        public List<double> CPriceHighArray
        {
            get
            {
                return _CPriceHighArray;
            }
            set
            {
                __isset.CPriceHighArray = true;
                this._CPriceHighArray = value;
            }
        }

        public List<double> B2BPriceLowerArray
        {
            get
            {
                return _B2BPriceLowerArray;
            }
            set
            {
                __isset.B2BPriceLowerArray = true;
                this._B2BPriceLowerArray = value;
            }
        }

        public List<double> B2BPriceHighArray
        {
            get
            {
                return _B2BPriceHighArray;
            }
            set
            {
                __isset.B2BPriceHighArray = true;
                this._B2BPriceHighArray = value;
            }
        }

        public List<int> CarAgeLowerArray
        {
            get
            {
                return _CarAgeLowerArray;
            }
            set
            {
                __isset.CarAgeLowerArray = true;
                this._CarAgeLowerArray = value;
            }
        }

        public List<int> CarAgeHighArray
        {
            get
            {
                return _CarAgeHighArray;
            }
            set
            {
                __isset.CarAgeHighArray = true;
                this._CarAgeHighArray = value;
            }
        }

        public List<double> ExhaustLevelLowerArray
        {
            get
            {
                return _ExhaustLevelLowerArray;
            }
            set
            {
                __isset.ExhaustLevelLowerArray = true;
                this._ExhaustLevelLowerArray = value;
            }
        }

        public List<double> ExhaustLevelHighArray
        {
            get
            {
                return _ExhaustLevelHighArray;
            }
            set
            {
                __isset.ExhaustLevelHighArray = true;
                this._ExhaustLevelHighArray = value;
            }
        }

        public List<int> ExhaustLevelArray
        {
            get
            {
                return _ExhaustLevelArray;
            }
            set
            {
                __isset.ExhaustLevelArray = true;
                this._ExhaustLevelArray = value;
            }
        }

        public List<int> DrivingMileageLowerArray
        {
            get
            {
                return _DrivingMileageLowerArray;
            }
            set
            {
                __isset.DrivingMileageLowerArray = true;
                this._DrivingMileageLowerArray = value;
            }
        }

        public List<int> DrivingMileageHighArray
        {
            get
            {
                return _DrivingMileageHighArray;
            }
            set
            {
                __isset.DrivingMileageHighArray = true;
                this._DrivingMileageHighArray = value;
            }
        }

        public List<int> CountryArray
        {
            get
            {
                return _CountryArray;
            }
            set
            {
                __isset.CountryArray = true;
                this._CountryArray = value;
            }
        }

        public int SuperiorId
        {
            get
            {
                return _SuperiorId;
            }
            set
            {
                __isset.SuperiorId = true;
                this._SuperiorId = value;
            }
        }

        public List<int> BrandAttrArray
        {
            get
            {
                return _BrandAttrArray;
            }
            set
            {
                __isset.BrandAttrArray = true;
                this._BrandAttrArray = value;
            }
        }

        public int UserType
        {
            get
            {
                return _UserType;
            }
            set
            {
                __isset.UserType = true;
                this._UserType = value;
            }
        }

        public int IsNeglect
        {
            get
            {
                return _IsNeglect;
            }
            set
            {
                __isset.IsNeglect = true;
                this._IsNeglect = value;
            }
        }

        public int IsVideo
        {
            get
            {
                return _IsVideo;
            }
            set
            {
                __isset.IsVideo = true;
                this._IsVideo = value;
            }
        }

        public int IsFirstPicTrue
        {
            get
            {
                return _IsFirstPicTrue;
            }
            set
            {
                __isset.IsFirstPicTrue = true;
                this._IsFirstPicTrue = value;
            }
        }

        public int IsDealerRecommend
        {
            get
            {
                return _IsDealerRecommend;
            }
            set
            {
                __isset.IsDealerRecommend = true;
                this._IsDealerRecommend = value;
            }
        }

        public List<int> CarSourceTypeArray
        {
            get
            {
                return _CarSourceTypeArray;
            }
            set
            {
                __isset.CarSourceTypeArray = true;
                this._CarSourceTypeArray = value;
            }
        }

        public List<string> CarYearArray
        {
            get
            {
                return _CarYearArray;
            }
            set
            {
                __isset.CarYearArray = true;
                this._CarYearArray = value;
            }
        }

        public List<long> CreateTimeArray
        {
            get
            {
                return _CreateTimeArray;
            }
            set
            {
                __isset.CreateTimeArray = true;
                this._CreateTimeArray = value;
            }
        }

        public List<long> PublishTimeArray
        {
            get
            {
                return _PublishTimeArray;
            }
            set
            {
                __isset.PublishTimeArray = true;
                this._PublishTimeArray = value;
            }
        }

        public List<int> CarTypeConfig
        {
            get
            {
                return _CarTypeConfig;
            }
            set
            {
                __isset.CarTypeConfig = true;
                this._CarTypeConfig = value;
            }
        }

        public int IsRecommendGL
        {
            get
            {
                return _IsRecommendGL;
            }
            set
            {
                __isset.IsRecommendGL = true;
                this._IsRecommendGL = value;
            }
        }

        public int IsWarranty
        {
            get
            {
                return _IsWarranty;
            }
            set
            {
                __isset.IsWarranty = true;
                this._IsWarranty = value;
            }
        }

        public List<int> WarrantyTypeArray
        {
            get
            {
                return _WarrantyTypeArray;
            }
            set
            {
                __isset.WarrantyTypeArray = true;
                this._WarrantyTypeArray = value;
            }
        }

        public int IsTop
        {
            get
            {
                return _IsTop;
            }
            set
            {
                __isset.IsTop = true;
                this._IsTop = value;
            }
        }

        public int IsActivity
        {
            get
            {
                return _IsActivity;
            }
            set
            {
                __isset.IsActivity = true;
                this._IsActivity = value;
            }
        }

        public int IsBangmai
        {
            get
            {
                return _IsBangmai;
            }
            set
            {
                __isset.IsBangmai = true;
                this._IsBangmai = value;
            }
        }

        public int IsBangmaiche
        {
            get
            {
                return _IsBangmaiche;
            }
            set
            {
                __isset.IsBangmaiche = true;
                this._IsBangmaiche = value;
            }
        }

        public int IsShowMr
        {
            get
            {
                return _IsShowMr;
            }
            set
            {
                __isset.IsShowMr = true;
                this._IsShowMr = value;
            }
        }

        public int IsCarId
        {
            get
            {
                return _IsCarId;
            }
            set
            {
                __isset.IsCarId = true;
                this._IsCarId = value;
            }
        }

        public int IsB2B
        {
            get
            {
                return _IsB2B;
            }
            set
            {
                __isset.IsB2B = true;
                this._IsB2B = value;
            }
        }

        public List<int> EnvirStandardArray
        {
            get
            {
                return _EnvirStandardArray;
            }
            set
            {
                __isset.EnvirStandardArray = true;
                this._EnvirStandardArray = value;
            }
        }

        public List<double> ConsumptionLowerArray
        {
            get
            {
                return _ConsumptionLowerArray;
            }
            set
            {
                __isset.ConsumptionLowerArray = true;
                this._ConsumptionLowerArray = value;
            }
        }

        public List<double> ConsumptionHighArray
        {
            get
            {
                return _ConsumptionHighArray;
            }
            set
            {
                __isset.ConsumptionHighArray = true;
                this._ConsumptionHighArray = value;
            }
        }

        public List<int> OilTypeArray
        {
            get
            {
                return _OilTypeArray;
            }
            set
            {
                __isset.OilTypeArray = true;
                this._OilTypeArray = value;
            }
        }

        public List<int> EngineLocationArray
        {
            get
            {
                return _EngineLocationArray;
            }
            set
            {
                __isset.EngineLocationArray = true;
                this._EngineLocationArray = value;
            }
        }

        public List<int> BodyDoorsLowerArray
        {
            get
            {
                return _BodyDoorsLowerArray;
            }
            set
            {
                __isset.BodyDoorsLowerArray = true;
                this._BodyDoorsLowerArray = value;
            }
        }

        public List<int> BodyDoorsHighArray
        {
            get
            {
                return _BodyDoorsHighArray;
            }
            set
            {
                __isset.BodyDoorsHighArray = true;
                this._BodyDoorsHighArray = value;
            }
        }

        public List<int> SeatNumLowerArray
        {
            get
            {
                return _SeatNumLowerArray;
            }
            set
            {
                __isset.SeatNumLowerArray = true;
                this._SeatNumLowerArray = value;
            }
        }

        public List<int> SeatNumHighArray
        {
            get
            {
                return _SeatNumHighArray;
            }
            set
            {
                __isset.SeatNumHighArray = true;
                this._SeatNumHighArray = value;
            }
        }

        public int IsWagon
        {
            get
            {
                return _IsWagon;
            }
            set
            {
                __isset.IsWagon = true;
                this._IsWagon = value;
            }
        }

        public List<int> DriveTypeArray
        {
            get
            {
                return _DriveTypeArray;
            }
            set
            {
                __isset.DriveTypeArray = true;
                this._DriveTypeArray = value;
            }
        }

        public List<int> CsBodyFormArray
        {
            get
            {
                return _CsBodyFormArray;
            }
            set
            {
                __isset.CsBodyFormArray = true;
                this._CsBodyFormArray = value;
            }
        }

        public List<int> CarLevelSecondArray
        {
            get
            {
                return _CarLevelSecondArray;
            }
            set
            {
                __isset.CarLevelSecondArray = true;
                this._CarLevelSecondArray = value;
            }
        }


        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool CommonFlag;
            public bool RequestSource;
            public bool ReturnFieldArray;
            public bool OrderByFieldArray;
            public bool OrderByIsDESCArray;
            public bool SortBoostFlag;
            public bool PageSize;
            public bool PageIndex;
            public bool IsHightLight;
            public bool DistanceKm;
            public bool Location;
            public bool IsCountSearch;
            public bool RequestParametersLog;
            public bool AggrFieldList;
            public bool UcarIdArray;
            public bool SiteId;
            public bool UcarStatusArray;
            public bool NoUcarIdArray;
            public bool IsAuthenticated;
            public bool Source;
            public bool CarLevelArray;
            public bool UserIdArray;
            public bool NoUserIdArray;
            public bool UcarSerialNumberArray;
            public bool KeyWord;
            public bool MainBrandArray;
            public bool BrandArray;
            public bool CarSerialArray;
            public bool CarIDArray;
            public bool GearBoxTypeArray;
            public bool ColorArray;
            public bool CarSource1L;
            public bool PictureCount;
            public bool BigAreaIdArray;
            public bool ProvinceIdArray;
            public bool CityIdArray;
            public bool NoCityIdArray;
            public bool RelateCityArray;
            public bool PriceLowerArray;
            public bool PriceHighArray;
            public bool CPriceLowerArray;
            public bool CPriceHighArray;
            public bool B2BPriceLowerArray;
            public bool B2BPriceHighArray;
            public bool CarAgeLowerArray;
            public bool CarAgeHighArray;
            public bool ExhaustLevelLowerArray;
            public bool ExhaustLevelHighArray;
            public bool ExhaustLevelArray;
            public bool DrivingMileageLowerArray;
            public bool DrivingMileageHighArray;
            public bool CountryArray;
            public bool SuperiorId;
            public bool BrandAttrArray;
            public bool UserType;
            public bool IsNeglect;
            public bool IsVideo;
            public bool IsFirstPicTrue;
            public bool IsDealerRecommend;
            public bool CarSourceTypeArray;
            public bool CarYearArray;
            public bool CreateTimeArray;
            public bool PublishTimeArray;
            public bool CarTypeConfig;
            public bool IsRecommendGL;
            public bool IsWarranty;
            public bool WarrantyTypeArray;
            public bool IsTop;
            public bool IsActivity;
            public bool IsBangmai;
            public bool IsBangmaiche;
            public bool IsShowMr;
            public bool IsCarId;
            public bool IsB2B;
            public bool EnvirStandardArray;
            public bool ConsumptionLowerArray;
            public bool ConsumptionHighArray;
            public bool OilTypeArray;
            public bool EngineLocationArray;
            public bool BodyDoorsLowerArray;
            public bool BodyDoorsHighArray;
            public bool SeatNumLowerArray;
            public bool SeatNumHighArray;
            public bool IsWagon;
            public bool DriveTypeArray;
            public bool CsBodyFormArray;
            public bool CarLevelSecondArray;
        }

        public DTOSearchCondition()
        {
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }
                    switch (field.ID)
                    {
                        case 101:
                            if (field.Type == TType.I32)
                            {
                                CommonFlag = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 102:
                            if (field.Type == TType.I32)
                            {
                                RequestSource = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 103:
                            if (field.Type == TType.List)
                            {
                                {
                                    ReturnFieldArray = new List<string>();
                                    TList _list0 = iprot.ReadListBegin();
                                    for (int _i1 = 0; _i1 < _list0.Count; ++_i1)
                                    {
                                        string _elem2;
                                        _elem2 = iprot.ReadString();
                                        ReturnFieldArray.Add(_elem2);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 104:
                            if (field.Type == TType.List)
                            {
                                {
                                    OrderByFieldArray = new List<string>();
                                    TList _list3 = iprot.ReadListBegin();
                                    for (int _i4 = 0; _i4 < _list3.Count; ++_i4)
                                    {
                                        string _elem5;
                                        _elem5 = iprot.ReadString();
                                        OrderByFieldArray.Add(_elem5);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 105:
                            if (field.Type == TType.List)
                            {
                                {
                                    OrderByIsDESCArray = new List<bool>();
                                    TList _list6 = iprot.ReadListBegin();
                                    for (int _i7 = 0; _i7 < _list6.Count; ++_i7)
                                    {
                                        bool _elem8;
                                        _elem8 = iprot.ReadBool();
                                        OrderByIsDESCArray.Add(_elem8);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 106:
                            if (field.Type == TType.I32)
                            {
                                SortBoostFlag = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 107:
                            if (field.Type == TType.I32)
                            {
                                PageSize = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 108:
                            if (field.Type == TType.I32)
                            {
                                PageIndex = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 109:
                            if (field.Type == TType.Bool)
                            {
                                IsHightLight = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 110:
                            if (field.Type == TType.Double)
                            {
                                DistanceKm = iprot.ReadDouble();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 111:
                            if (field.Type == TType.String)
                            {
                                Location = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 112:
                            if (field.Type == TType.Bool)
                            {
                                IsCountSearch = iprot.ReadBool();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 113:
                            if (field.Type == TType.String)
                            {
                                RequestParametersLog = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 114:
                            if (field.Type == TType.String)
                            {
                                AggrFieldList = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 1:
                            if (field.Type == TType.List)
                            {
                                {
                                    UcarIdArray = new List<int>();
                                    TList _list9 = iprot.ReadListBegin();
                                    for (int _i10 = 0; _i10 < _list9.Count; ++_i10)
                                    {
                                        int _elem11;
                                        _elem11 = iprot.ReadI32();
                                        UcarIdArray.Add(_elem11);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.List)
                            {
                                {
                                    SiteId = new List<int>();
                                    TList _list12 = iprot.ReadListBegin();
                                    for (int _i13 = 0; _i13 < _list12.Count; ++_i13)
                                    {
                                        int _elem14;
                                        _elem14 = iprot.ReadI32();
                                        SiteId.Add(_elem14);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.List)
                            {
                                {
                                    UcarStatusArray = new List<int>();
                                    TList _list15 = iprot.ReadListBegin();
                                    for (int _i16 = 0; _i16 < _list15.Count; ++_i16)
                                    {
                                        int _elem17;
                                        _elem17 = iprot.ReadI32();
                                        UcarStatusArray.Add(_elem17);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.List)
                            {
                                {
                                    NoUcarIdArray = new List<int>();
                                    TList _list18 = iprot.ReadListBegin();
                                    for (int _i19 = 0; _i19 < _list18.Count; ++_i19)
                                    {
                                        int _elem20;
                                        _elem20 = iprot.ReadI32();
                                        NoUcarIdArray.Add(_elem20);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 5:
                            if (field.Type == TType.I32)
                            {
                                IsAuthenticated = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 6:
                            if (field.Type == TType.I32)
                            {
                                Source = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 7:
                            if (field.Type == TType.List)
                            {
                                {
                                    CarLevelArray = new List<string>();
                                    TList _list21 = iprot.ReadListBegin();
                                    for (int _i22 = 0; _i22 < _list21.Count; ++_i22)
                                    {
                                        string _elem23;
                                        _elem23 = iprot.ReadString();
                                        CarLevelArray.Add(_elem23);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 8:
                            if (field.Type == TType.List)
                            {
                                {
                                    UserIdArray = new List<int>();
                                    TList _list24 = iprot.ReadListBegin();
                                    for (int _i25 = 0; _i25 < _list24.Count; ++_i25)
                                    {
                                        int _elem26;
                                        _elem26 = iprot.ReadI32();
                                        UserIdArray.Add(_elem26);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 9:
                            if (field.Type == TType.List)
                            {
                                {
                                    NoUserIdArray = new List<int>();
                                    TList _list27 = iprot.ReadListBegin();
                                    for (int _i28 = 0; _i28 < _list27.Count; ++_i28)
                                    {
                                        int _elem29;
                                        _elem29 = iprot.ReadI32();
                                        NoUserIdArray.Add(_elem29);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 10:
                            if (field.Type == TType.List)
                            {
                                {
                                    UcarSerialNumberArray = new List<string>();
                                    TList _list30 = iprot.ReadListBegin();
                                    for (int _i31 = 0; _i31 < _list30.Count; ++_i31)
                                    {
                                        string _elem32;
                                        _elem32 = iprot.ReadString();
                                        UcarSerialNumberArray.Add(_elem32);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 11:
                            if (field.Type == TType.String)
                            {
                                KeyWord = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 12:
                            if (field.Type == TType.List)
                            {
                                {
                                    MainBrandArray = new List<int>();
                                    TList _list33 = iprot.ReadListBegin();
                                    for (int _i34 = 0; _i34 < _list33.Count; ++_i34)
                                    {
                                        int _elem35;
                                        _elem35 = iprot.ReadI32();
                                        MainBrandArray.Add(_elem35);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 13:
                            if (field.Type == TType.List)
                            {
                                {
                                    BrandArray = new List<int>();
                                    TList _list36 = iprot.ReadListBegin();
                                    for (int _i37 = 0; _i37 < _list36.Count; ++_i37)
                                    {
                                        int _elem38;
                                        _elem38 = iprot.ReadI32();
                                        BrandArray.Add(_elem38);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 14:
                            if (field.Type == TType.List)
                            {
                                {
                                    CarSerialArray = new List<int>();
                                    TList _list39 = iprot.ReadListBegin();
                                    for (int _i40 = 0; _i40 < _list39.Count; ++_i40)
                                    {
                                        int _elem41;
                                        _elem41 = iprot.ReadI32();
                                        CarSerialArray.Add(_elem41);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 15:
                            if (field.Type == TType.List)
                            {
                                {
                                    CarIDArray = new List<int>();
                                    TList _list42 = iprot.ReadListBegin();
                                    for (int _i43 = 0; _i43 < _list42.Count; ++_i43)
                                    {
                                        int _elem44;
                                        _elem44 = iprot.ReadI32();
                                        CarIDArray.Add(_elem44);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 16:
                            if (field.Type == TType.List)
                            {
                                {
                                    GearBoxTypeArray = new List<int>();
                                    TList _list45 = iprot.ReadListBegin();
                                    for (int _i46 = 0; _i46 < _list45.Count; ++_i46)
                                    {
                                        int _elem47;
                                        _elem47 = iprot.ReadI32();
                                        GearBoxTypeArray.Add(_elem47);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 17:
                            if (field.Type == TType.List)
                            {
                                {
                                    ColorArray = new List<string>();
                                    TList _list48 = iprot.ReadListBegin();
                                    for (int _i49 = 0; _i49 < _list48.Count; ++_i49)
                                    {
                                        string _elem50;
                                        _elem50 = iprot.ReadString();
                                        ColorArray.Add(_elem50);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 18:
                            if (field.Type == TType.I32)
                            {
                                CarSource1L = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 19:
                            if (field.Type == TType.I32)
                            {
                                PictureCount = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 20:
                            if (field.Type == TType.List)
                            {
                                {
                                    BigAreaIdArray = new List<int>();
                                    TList _list51 = iprot.ReadListBegin();
                                    for (int _i52 = 0; _i52 < _list51.Count; ++_i52)
                                    {
                                        int _elem53;
                                        _elem53 = iprot.ReadI32();
                                        BigAreaIdArray.Add(_elem53);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 21:
                            if (field.Type == TType.List)
                            {
                                {
                                    ProvinceIdArray = new List<int>();
                                    TList _list54 = iprot.ReadListBegin();
                                    for (int _i55 = 0; _i55 < _list54.Count; ++_i55)
                                    {
                                        int _elem56;
                                        _elem56 = iprot.ReadI32();
                                        ProvinceIdArray.Add(_elem56);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 22:
                            if (field.Type == TType.List)
                            {
                                {
                                    CityIdArray = new List<int>();
                                    TList _list57 = iprot.ReadListBegin();
                                    for (int _i58 = 0; _i58 < _list57.Count; ++_i58)
                                    {
                                        int _elem59;
                                        _elem59 = iprot.ReadI32();
                                        CityIdArray.Add(_elem59);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 23:
                            if (field.Type == TType.List)
                            {
                                {
                                    NoCityIdArray = new List<int>();
                                    TList _list60 = iprot.ReadListBegin();
                                    for (int _i61 = 0; _i61 < _list60.Count; ++_i61)
                                    {
                                        int _elem62;
                                        _elem62 = iprot.ReadI32();
                                        NoCityIdArray.Add(_elem62);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 24:
                            if (field.Type == TType.List)
                            {
                                {
                                    RelateCityArray = new List<int>();
                                    TList _list63 = iprot.ReadListBegin();
                                    for (int _i64 = 0; _i64 < _list63.Count; ++_i64)
                                    {
                                        int _elem65;
                                        _elem65 = iprot.ReadI32();
                                        RelateCityArray.Add(_elem65);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 25:
                            if (field.Type == TType.List)
                            {
                                {
                                    PriceLowerArray = new List<double>();
                                    TList _list66 = iprot.ReadListBegin();
                                    for (int _i67 = 0; _i67 < _list66.Count; ++_i67)
                                    {
                                        double _elem68;
                                        _elem68 = iprot.ReadDouble();
                                        PriceLowerArray.Add(_elem68);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 26:
                            if (field.Type == TType.List)
                            {
                                {
                                    PriceHighArray = new List<double>();
                                    TList _list69 = iprot.ReadListBegin();
                                    for (int _i70 = 0; _i70 < _list69.Count; ++_i70)
                                    {
                                        double _elem71;
                                        _elem71 = iprot.ReadDouble();
                                        PriceHighArray.Add(_elem71);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 27:
                            if (field.Type == TType.List)
                            {
                                {
                                    CPriceLowerArray = new List<double>();
                                    TList _list72 = iprot.ReadListBegin();
                                    for (int _i73 = 0; _i73 < _list72.Count; ++_i73)
                                    {
                                        double _elem74;
                                        _elem74 = iprot.ReadDouble();
                                        CPriceLowerArray.Add(_elem74);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 28:
                            if (field.Type == TType.List)
                            {
                                {
                                    CPriceHighArray = new List<double>();
                                    TList _list75 = iprot.ReadListBegin();
                                    for (int _i76 = 0; _i76 < _list75.Count; ++_i76)
                                    {
                                        double _elem77;
                                        _elem77 = iprot.ReadDouble();
                                        CPriceHighArray.Add(_elem77);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 29:
                            if (field.Type == TType.List)
                            {
                                {
                                    B2BPriceLowerArray = new List<double>();
                                    TList _list78 = iprot.ReadListBegin();
                                    for (int _i79 = 0; _i79 < _list78.Count; ++_i79)
                                    {
                                        double _elem80;
                                        _elem80 = iprot.ReadDouble();
                                        B2BPriceLowerArray.Add(_elem80);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 30:
                            if (field.Type == TType.List)
                            {
                                {
                                    B2BPriceHighArray = new List<double>();
                                    TList _list81 = iprot.ReadListBegin();
                                    for (int _i82 = 0; _i82 < _list81.Count; ++_i82)
                                    {
                                        double _elem83;
                                        _elem83 = iprot.ReadDouble();
                                        B2BPriceHighArray.Add(_elem83);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 31:
                            if (field.Type == TType.List)
                            {
                                {
                                    CarAgeLowerArray = new List<int>();
                                    TList _list84 = iprot.ReadListBegin();
                                    for (int _i85 = 0; _i85 < _list84.Count; ++_i85)
                                    {
                                        int _elem86;
                                        _elem86 = iprot.ReadI32();
                                        CarAgeLowerArray.Add(_elem86);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 32:
                            if (field.Type == TType.List)
                            {
                                {
                                    CarAgeHighArray = new List<int>();
                                    TList _list87 = iprot.ReadListBegin();
                                    for (int _i88 = 0; _i88 < _list87.Count; ++_i88)
                                    {
                                        int _elem89;
                                        _elem89 = iprot.ReadI32();
                                        CarAgeHighArray.Add(_elem89);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 33:
                            if (field.Type == TType.List)
                            {
                                {
                                    ExhaustLevelLowerArray = new List<double>();
                                    TList _list90 = iprot.ReadListBegin();
                                    for (int _i91 = 0; _i91 < _list90.Count; ++_i91)
                                    {
                                        double _elem92;
                                        _elem92 = iprot.ReadDouble();
                                        ExhaustLevelLowerArray.Add(_elem92);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 34:
                            if (field.Type == TType.List)
                            {
                                {
                                    ExhaustLevelHighArray = new List<double>();
                                    TList _list93 = iprot.ReadListBegin();
                                    for (int _i94 = 0; _i94 < _list93.Count; ++_i94)
                                    {
                                        double _elem95;
                                        _elem95 = iprot.ReadDouble();
                                        ExhaustLevelHighArray.Add(_elem95);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 35:
                            if (field.Type == TType.List)
                            {
                                {
                                    ExhaustLevelArray = new List<int>();
                                    TList _list96 = iprot.ReadListBegin();
                                    for (int _i97 = 0; _i97 < _list96.Count; ++_i97)
                                    {
                                        int _elem98;
                                        _elem98 = iprot.ReadI32();
                                        ExhaustLevelArray.Add(_elem98);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 36:
                            if (field.Type == TType.List)
                            {
                                {
                                    DrivingMileageLowerArray = new List<int>();
                                    TList _list99 = iprot.ReadListBegin();
                                    for (int _i100 = 0; _i100 < _list99.Count; ++_i100)
                                    {
                                        int _elem101;
                                        _elem101 = iprot.ReadI32();
                                        DrivingMileageLowerArray.Add(_elem101);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 37:
                            if (field.Type == TType.List)
                            {
                                {
                                    DrivingMileageHighArray = new List<int>();
                                    TList _list102 = iprot.ReadListBegin();
                                    for (int _i103 = 0; _i103 < _list102.Count; ++_i103)
                                    {
                                        int _elem104;
                                        _elem104 = iprot.ReadI32();
                                        DrivingMileageHighArray.Add(_elem104);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 38:
                            if (field.Type == TType.List)
                            {
                                {
                                    CountryArray = new List<int>();
                                    TList _list105 = iprot.ReadListBegin();
                                    for (int _i106 = 0; _i106 < _list105.Count; ++_i106)
                                    {
                                        int _elem107;
                                        _elem107 = iprot.ReadI32();
                                        CountryArray.Add(_elem107);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 39:
                            if (field.Type == TType.I32)
                            {
                                SuperiorId = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 40:
                            if (field.Type == TType.List)
                            {
                                {
                                    BrandAttrArray = new List<int>();
                                    TList _list108 = iprot.ReadListBegin();
                                    for (int _i109 = 0; _i109 < _list108.Count; ++_i109)
                                    {
                                        int _elem110;
                                        _elem110 = iprot.ReadI32();
                                        BrandAttrArray.Add(_elem110);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 41:
                            if (field.Type == TType.I32)
                            {
                                UserType = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 42:
                            if (field.Type == TType.I32)
                            {
                                IsNeglect = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 43:
                            if (field.Type == TType.I32)
                            {
                                IsVideo = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 44:
                            if (field.Type == TType.I32)
                            {
                                IsFirstPicTrue = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 45:
                            if (field.Type == TType.I32)
                            {
                                IsDealerRecommend = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 46:
                            if (field.Type == TType.List)
                            {
                                {
                                    CarSourceTypeArray = new List<int>();
                                    TList _list111 = iprot.ReadListBegin();
                                    for (int _i112 = 0; _i112 < _list111.Count; ++_i112)
                                    {
                                        int _elem113;
                                        _elem113 = iprot.ReadI32();
                                        CarSourceTypeArray.Add(_elem113);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 47:
                            if (field.Type == TType.List)
                            {
                                {
                                    CarYearArray = new List<string>();
                                    TList _list114 = iprot.ReadListBegin();
                                    for (int _i115 = 0; _i115 < _list114.Count; ++_i115)
                                    {
                                        string _elem116;
                                        _elem116 = iprot.ReadString();
                                        CarYearArray.Add(_elem116);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 48:
                            if (field.Type == TType.List)
                            {
                                {
                                    CreateTimeArray = new List<long>();
                                    TList _list117 = iprot.ReadListBegin();
                                    for (int _i118 = 0; _i118 < _list117.Count; ++_i118)
                                    {
                                        long _elem119;
                                        _elem119 = iprot.ReadI64();
                                        CreateTimeArray.Add(_elem119);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 49:
                            if (field.Type == TType.List)
                            {
                                {
                                    PublishTimeArray = new List<long>();
                                    TList _list120 = iprot.ReadListBegin();
                                    for (int _i121 = 0; _i121 < _list120.Count; ++_i121)
                                    {
                                        long _elem122;
                                        _elem122 = iprot.ReadI64();
                                        PublishTimeArray.Add(_elem122);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 50:
                            if (field.Type == TType.List)
                            {
                                {
                                    CarTypeConfig = new List<int>();
                                    TList _list123 = iprot.ReadListBegin();
                                    for (int _i124 = 0; _i124 < _list123.Count; ++_i124)
                                    {
                                        int _elem125;
                                        _elem125 = iprot.ReadI32();
                                        CarTypeConfig.Add(_elem125);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 51:
                            if (field.Type == TType.I32)
                            {
                                IsRecommendGL = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 52:
                            if (field.Type == TType.I32)
                            {
                                IsWarranty = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 53:
                            if (field.Type == TType.List)
                            {
                                {
                                    WarrantyTypeArray = new List<int>();
                                    TList _list126 = iprot.ReadListBegin();
                                    for (int _i127 = 0; _i127 < _list126.Count; ++_i127)
                                    {
                                        int _elem128;
                                        _elem128 = iprot.ReadI32();
                                        WarrantyTypeArray.Add(_elem128);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 54:
                            if (field.Type == TType.I32)
                            {
                                IsTop = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 55:
                            if (field.Type == TType.I32)
                            {
                                IsActivity = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 56:
                            if (field.Type == TType.I32)
                            {
                                IsBangmai = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 57:
                            if (field.Type == TType.I32)
                            {
                                IsBangmaiche = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 58:
                            if (field.Type == TType.I32)
                            {
                                IsShowMr = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 59:
                            if (field.Type == TType.I32)
                            {
                                IsCarId = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 60:
                            if (field.Type == TType.I32)
                            {
                                IsB2B = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 201:
                            if (field.Type == TType.List)
                            {
                                {
                                    EnvirStandardArray = new List<int>();
                                    TList _list129 = iprot.ReadListBegin();
                                    for (int _i130 = 0; _i130 < _list129.Count; ++_i130)
                                    {
                                        int _elem131;
                                        _elem131 = iprot.ReadI32();
                                        EnvirStandardArray.Add(_elem131);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 202:
                            if (field.Type == TType.List)
                            {
                                {
                                    ConsumptionLowerArray = new List<double>();
                                    TList _list132 = iprot.ReadListBegin();
                                    for (int _i133 = 0; _i133 < _list132.Count; ++_i133)
                                    {
                                        double _elem134;
                                        _elem134 = iprot.ReadDouble();
                                        ConsumptionLowerArray.Add(_elem134);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 203:
                            if (field.Type == TType.List)
                            {
                                {
                                    ConsumptionHighArray = new List<double>();
                                    TList _list135 = iprot.ReadListBegin();
                                    for (int _i136 = 0; _i136 < _list135.Count; ++_i136)
                                    {
                                        double _elem137;
                                        _elem137 = iprot.ReadDouble();
                                        ConsumptionHighArray.Add(_elem137);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 204:
                            if (field.Type == TType.List)
                            {
                                {
                                    OilTypeArray = new List<int>();
                                    TList _list138 = iprot.ReadListBegin();
                                    for (int _i139 = 0; _i139 < _list138.Count; ++_i139)
                                    {
                                        int _elem140;
                                        _elem140 = iprot.ReadI32();
                                        OilTypeArray.Add(_elem140);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 205:
                            if (field.Type == TType.List)
                            {
                                {
                                    EngineLocationArray = new List<int>();
                                    TList _list141 = iprot.ReadListBegin();
                                    for (int _i142 = 0; _i142 < _list141.Count; ++_i142)
                                    {
                                        int _elem143;
                                        _elem143 = iprot.ReadI32();
                                        EngineLocationArray.Add(_elem143);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 206:
                            if (field.Type == TType.List)
                            {
                                {
                                    BodyDoorsLowerArray = new List<int>();
                                    TList _list144 = iprot.ReadListBegin();
                                    for (int _i145 = 0; _i145 < _list144.Count; ++_i145)
                                    {
                                        int _elem146;
                                        _elem146 = iprot.ReadI32();
                                        BodyDoorsLowerArray.Add(_elem146);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 207:
                            if (field.Type == TType.List)
                            {
                                {
                                    BodyDoorsHighArray = new List<int>();
                                    TList _list147 = iprot.ReadListBegin();
                                    for (int _i148 = 0; _i148 < _list147.Count; ++_i148)
                                    {
                                        int _elem149;
                                        _elem149 = iprot.ReadI32();
                                        BodyDoorsHighArray.Add(_elem149);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 208:
                            if (field.Type == TType.List)
                            {
                                {
                                    SeatNumLowerArray = new List<int>();
                                    TList _list150 = iprot.ReadListBegin();
                                    for (int _i151 = 0; _i151 < _list150.Count; ++_i151)
                                    {
                                        int _elem152;
                                        _elem152 = iprot.ReadI32();
                                        SeatNumLowerArray.Add(_elem152);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 209:
                            if (field.Type == TType.List)
                            {
                                {
                                    SeatNumHighArray = new List<int>();
                                    TList _list153 = iprot.ReadListBegin();
                                    for (int _i154 = 0; _i154 < _list153.Count; ++_i154)
                                    {
                                        int _elem155;
                                        _elem155 = iprot.ReadI32();
                                        SeatNumHighArray.Add(_elem155);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 210:
                            if (field.Type == TType.I32)
                            {
                                IsWagon = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 211:
                            if (field.Type == TType.List)
                            {
                                {
                                    DriveTypeArray = new List<int>();
                                    TList _list156 = iprot.ReadListBegin();
                                    for (int _i157 = 0; _i157 < _list156.Count; ++_i157)
                                    {
                                        int _elem158;
                                        _elem158 = iprot.ReadI32();
                                        DriveTypeArray.Add(_elem158);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 212:
                            if (field.Type == TType.List)
                            {
                                {
                                    CsBodyFormArray = new List<int>();
                                    TList _list159 = iprot.ReadListBegin();
                                    for (int _i160 = 0; _i160 < _list159.Count; ++_i160)
                                    {
                                        int _elem161;
                                        _elem161 = iprot.ReadI32();
                                        CsBodyFormArray.Add(_elem161);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        case 213:
                            if (field.Type == TType.List)
                            {
                                {
                                    CarLevelSecondArray = new List<int>();
                                    TList _list162 = iprot.ReadListBegin();
                                    for (int _i163 = 0; _i163 < _list162.Count; ++_i163)
                                    {
                                        int _elem164;
                                        _elem164 = iprot.ReadI32();
                                        CarLevelSecondArray.Add(_elem164);
                                    }
                                    iprot.ReadListEnd();
                                }
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }
                            break;
                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }
                    iprot.ReadFieldEnd();
                }
                iprot.ReadStructEnd();
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("DTOSearchCondition");
                oprot.WriteStructBegin(struc);
                TField field = new TField();
                if (UcarIdArray != null && __isset.UcarIdArray)
                {
                    field.Name = "UcarIdArray";
                    field.Type = TType.List;
                    field.ID = 1;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, UcarIdArray.Count));
                        foreach (int _iter165 in UcarIdArray)
                        {
                            oprot.WriteI32(_iter165);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (SiteId != null && __isset.SiteId)
                {
                    field.Name = "SiteId";
                    field.Type = TType.List;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, SiteId.Count));
                        foreach (int _iter166 in SiteId)
                        {
                            oprot.WriteI32(_iter166);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (UcarStatusArray != null && __isset.UcarStatusArray)
                {
                    field.Name = "UcarStatusArray";
                    field.Type = TType.List;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, UcarStatusArray.Count));
                        foreach (int _iter167 in UcarStatusArray)
                        {
                            oprot.WriteI32(_iter167);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (NoUcarIdArray != null && __isset.NoUcarIdArray)
                {
                    field.Name = "NoUcarIdArray";
                    field.Type = TType.List;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, NoUcarIdArray.Count));
                        foreach (int _iter168 in NoUcarIdArray)
                        {
                            oprot.WriteI32(_iter168);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (__isset.IsAuthenticated)
                {
                    field.Name = "IsAuthenticated";
                    field.Type = TType.I32;
                    field.ID = 5;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(IsAuthenticated);
                    oprot.WriteFieldEnd();
                }
                if (__isset.Source)
                {
                    field.Name = "Source";
                    field.Type = TType.I32;
                    field.ID = 6;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(Source);
                    oprot.WriteFieldEnd();
                }
                if (CarLevelArray != null && __isset.CarLevelArray)
                {
                    field.Name = "CarLevelArray";
                    field.Type = TType.List;
                    field.ID = 7;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, CarLevelArray.Count));
                        foreach (string _iter169 in CarLevelArray)
                        {
                            oprot.WriteString(_iter169);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (UserIdArray != null && __isset.UserIdArray)
                {
                    field.Name = "UserIdArray";
                    field.Type = TType.List;
                    field.ID = 8;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, UserIdArray.Count));
                        foreach (int _iter170 in UserIdArray)
                        {
                            oprot.WriteI32(_iter170);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (NoUserIdArray != null && __isset.NoUserIdArray)
                {
                    field.Name = "NoUserIdArray";
                    field.Type = TType.List;
                    field.ID = 9;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, NoUserIdArray.Count));
                        foreach (int _iter171 in NoUserIdArray)
                        {
                            oprot.WriteI32(_iter171);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (UcarSerialNumberArray != null && __isset.UcarSerialNumberArray)
                {
                    field.Name = "UcarSerialNumberArray";
                    field.Type = TType.List;
                    field.ID = 10;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, UcarSerialNumberArray.Count));
                        foreach (string _iter172 in UcarSerialNumberArray)
                        {
                            oprot.WriteString(_iter172);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (KeyWord != null && __isset.KeyWord)
                {
                    field.Name = "KeyWord";
                    field.Type = TType.String;
                    field.ID = 11;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(KeyWord);
                    oprot.WriteFieldEnd();
                }
                if (MainBrandArray != null && __isset.MainBrandArray)
                {
                    field.Name = "MainBrandArray";
                    field.Type = TType.List;
                    field.ID = 12;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, MainBrandArray.Count));
                        foreach (int _iter173 in MainBrandArray)
                        {
                            oprot.WriteI32(_iter173);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (BrandArray != null && __isset.BrandArray)
                {
                    field.Name = "BrandArray";
                    field.Type = TType.List;
                    field.ID = 13;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, BrandArray.Count));
                        foreach (int _iter174 in BrandArray)
                        {
                            oprot.WriteI32(_iter174);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (CarSerialArray != null && __isset.CarSerialArray)
                {
                    field.Name = "CarSerialArray";
                    field.Type = TType.List;
                    field.ID = 14;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, CarSerialArray.Count));
                        foreach (int _iter175 in CarSerialArray)
                        {
                            oprot.WriteI32(_iter175);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (CarIDArray != null && __isset.CarIDArray)
                {
                    field.Name = "CarIDArray";
                    field.Type = TType.List;
                    field.ID = 15;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, CarIDArray.Count));
                        foreach (int _iter176 in CarIDArray)
                        {
                            oprot.WriteI32(_iter176);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (GearBoxTypeArray != null && __isset.GearBoxTypeArray)
                {
                    field.Name = "GearBoxTypeArray";
                    field.Type = TType.List;
                    field.ID = 16;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, GearBoxTypeArray.Count));
                        foreach (int _iter177 in GearBoxTypeArray)
                        {
                            oprot.WriteI32(_iter177);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (ColorArray != null && __isset.ColorArray)
                {
                    field.Name = "ColorArray";
                    field.Type = TType.List;
                    field.ID = 17;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, ColorArray.Count));
                        foreach (string _iter178 in ColorArray)
                        {
                            oprot.WriteString(_iter178);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (__isset.CarSource1L)
                {
                    field.Name = "CarSource1L";
                    field.Type = TType.I32;
                    field.ID = 18;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(CarSource1L);
                    oprot.WriteFieldEnd();
                }
                if (__isset.PictureCount)
                {
                    field.Name = "PictureCount";
                    field.Type = TType.I32;
                    field.ID = 19;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(PictureCount);
                    oprot.WriteFieldEnd();
                }
                if (BigAreaIdArray != null && __isset.BigAreaIdArray)
                {
                    field.Name = "BigAreaIdArray";
                    field.Type = TType.List;
                    field.ID = 20;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, BigAreaIdArray.Count));
                        foreach (int _iter179 in BigAreaIdArray)
                        {
                            oprot.WriteI32(_iter179);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (ProvinceIdArray != null && __isset.ProvinceIdArray)
                {
                    field.Name = "ProvinceIdArray";
                    field.Type = TType.List;
                    field.ID = 21;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, ProvinceIdArray.Count));
                        foreach (int _iter180 in ProvinceIdArray)
                        {
                            oprot.WriteI32(_iter180);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (CityIdArray != null && __isset.CityIdArray)
                {
                    field.Name = "CityIdArray";
                    field.Type = TType.List;
                    field.ID = 22;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, CityIdArray.Count));
                        foreach (int _iter181 in CityIdArray)
                        {
                            oprot.WriteI32(_iter181);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (NoCityIdArray != null && __isset.NoCityIdArray)
                {
                    field.Name = "NoCityIdArray";
                    field.Type = TType.List;
                    field.ID = 23;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, NoCityIdArray.Count));
                        foreach (int _iter182 in NoCityIdArray)
                        {
                            oprot.WriteI32(_iter182);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (RelateCityArray != null && __isset.RelateCityArray)
                {
                    field.Name = "RelateCityArray";
                    field.Type = TType.List;
                    field.ID = 24;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, RelateCityArray.Count));
                        foreach (int _iter183 in RelateCityArray)
                        {
                            oprot.WriteI32(_iter183);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (PriceLowerArray != null && __isset.PriceLowerArray)
                {
                    field.Name = "PriceLowerArray";
                    field.Type = TType.List;
                    field.ID = 25;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Double, PriceLowerArray.Count));
                        foreach (double _iter184 in PriceLowerArray)
                        {
                            oprot.WriteDouble(_iter184);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (PriceHighArray != null && __isset.PriceHighArray)
                {
                    field.Name = "PriceHighArray";
                    field.Type = TType.List;
                    field.ID = 26;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Double, PriceHighArray.Count));
                        foreach (double _iter185 in PriceHighArray)
                        {
                            oprot.WriteDouble(_iter185);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (CPriceLowerArray != null && __isset.CPriceLowerArray)
                {
                    field.Name = "CPriceLowerArray";
                    field.Type = TType.List;
                    field.ID = 27;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Double, CPriceLowerArray.Count));
                        foreach (double _iter186 in CPriceLowerArray)
                        {
                            oprot.WriteDouble(_iter186);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (CPriceHighArray != null && __isset.CPriceHighArray)
                {
                    field.Name = "CPriceHighArray";
                    field.Type = TType.List;
                    field.ID = 28;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Double, CPriceHighArray.Count));
                        foreach (double _iter187 in CPriceHighArray)
                        {
                            oprot.WriteDouble(_iter187);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (B2BPriceLowerArray != null && __isset.B2BPriceLowerArray)
                {
                    field.Name = "B2BPriceLowerArray";
                    field.Type = TType.List;
                    field.ID = 29;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Double, B2BPriceLowerArray.Count));
                        foreach (double _iter188 in B2BPriceLowerArray)
                        {
                            oprot.WriteDouble(_iter188);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (B2BPriceHighArray != null && __isset.B2BPriceHighArray)
                {
                    field.Name = "B2BPriceHighArray";
                    field.Type = TType.List;
                    field.ID = 30;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Double, B2BPriceHighArray.Count));
                        foreach (double _iter189 in B2BPriceHighArray)
                        {
                            oprot.WriteDouble(_iter189);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (CarAgeLowerArray != null && __isset.CarAgeLowerArray)
                {
                    field.Name = "CarAgeLowerArray";
                    field.Type = TType.List;
                    field.ID = 31;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, CarAgeLowerArray.Count));
                        foreach (int _iter190 in CarAgeLowerArray)
                        {
                            oprot.WriteI32(_iter190);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (CarAgeHighArray != null && __isset.CarAgeHighArray)
                {
                    field.Name = "CarAgeHighArray";
                    field.Type = TType.List;
                    field.ID = 32;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, CarAgeHighArray.Count));
                        foreach (int _iter191 in CarAgeHighArray)
                        {
                            oprot.WriteI32(_iter191);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (ExhaustLevelLowerArray != null && __isset.ExhaustLevelLowerArray)
                {
                    field.Name = "ExhaustLevelLowerArray";
                    field.Type = TType.List;
                    field.ID = 33;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Double, ExhaustLevelLowerArray.Count));
                        foreach (double _iter192 in ExhaustLevelLowerArray)
                        {
                            oprot.WriteDouble(_iter192);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (ExhaustLevelHighArray != null && __isset.ExhaustLevelHighArray)
                {
                    field.Name = "ExhaustLevelHighArray";
                    field.Type = TType.List;
                    field.ID = 34;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Double, ExhaustLevelHighArray.Count));
                        foreach (double _iter193 in ExhaustLevelHighArray)
                        {
                            oprot.WriteDouble(_iter193);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (ExhaustLevelArray != null && __isset.ExhaustLevelArray)
                {
                    field.Name = "ExhaustLevelArray";
                    field.Type = TType.List;
                    field.ID = 35;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, ExhaustLevelArray.Count));
                        foreach (int _iter194 in ExhaustLevelArray)
                        {
                            oprot.WriteI32(_iter194);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (DrivingMileageLowerArray != null && __isset.DrivingMileageLowerArray)
                {
                    field.Name = "DrivingMileageLowerArray";
                    field.Type = TType.List;
                    field.ID = 36;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, DrivingMileageLowerArray.Count));
                        foreach (int _iter195 in DrivingMileageLowerArray)
                        {
                            oprot.WriteI32(_iter195);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (DrivingMileageHighArray != null && __isset.DrivingMileageHighArray)
                {
                    field.Name = "DrivingMileageHighArray";
                    field.Type = TType.List;
                    field.ID = 37;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, DrivingMileageHighArray.Count));
                        foreach (int _iter196 in DrivingMileageHighArray)
                        {
                            oprot.WriteI32(_iter196);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (CountryArray != null && __isset.CountryArray)
                {
                    field.Name = "CountryArray";
                    field.Type = TType.List;
                    field.ID = 38;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, CountryArray.Count));
                        foreach (int _iter197 in CountryArray)
                        {
                            oprot.WriteI32(_iter197);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (__isset.SuperiorId)
                {
                    field.Name = "SuperiorId";
                    field.Type = TType.I32;
                    field.ID = 39;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(SuperiorId);
                    oprot.WriteFieldEnd();
                }
                if (BrandAttrArray != null && __isset.BrandAttrArray)
                {
                    field.Name = "BrandAttrArray";
                    field.Type = TType.List;
                    field.ID = 40;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, BrandAttrArray.Count));
                        foreach (int _iter198 in BrandAttrArray)
                        {
                            oprot.WriteI32(_iter198);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (__isset.UserType)
                {
                    field.Name = "UserType";
                    field.Type = TType.I32;
                    field.ID = 41;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(UserType);
                    oprot.WriteFieldEnd();
                }
                if (__isset.IsNeglect)
                {
                    field.Name = "IsNeglect";
                    field.Type = TType.I32;
                    field.ID = 42;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(IsNeglect);
                    oprot.WriteFieldEnd();
                }
                if (__isset.IsVideo)
                {
                    field.Name = "IsVideo";
                    field.Type = TType.I32;
                    field.ID = 43;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(IsVideo);
                    oprot.WriteFieldEnd();
                }
                if (__isset.IsFirstPicTrue)
                {
                    field.Name = "IsFirstPicTrue";
                    field.Type = TType.I32;
                    field.ID = 44;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(IsFirstPicTrue);
                    oprot.WriteFieldEnd();
                }
                if (__isset.IsDealerRecommend)
                {
                    field.Name = "IsDealerRecommend";
                    field.Type = TType.I32;
                    field.ID = 45;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(IsDealerRecommend);
                    oprot.WriteFieldEnd();
                }
                if (CarSourceTypeArray != null && __isset.CarSourceTypeArray)
                {
                    field.Name = "CarSourceTypeArray";
                    field.Type = TType.List;
                    field.ID = 46;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, CarSourceTypeArray.Count));
                        foreach (int _iter199 in CarSourceTypeArray)
                        {
                            oprot.WriteI32(_iter199);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (CarYearArray != null && __isset.CarYearArray)
                {
                    field.Name = "CarYearArray";
                    field.Type = TType.List;
                    field.ID = 47;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, CarYearArray.Count));
                        foreach (string _iter200 in CarYearArray)
                        {
                            oprot.WriteString(_iter200);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (CreateTimeArray != null && __isset.CreateTimeArray)
                {
                    field.Name = "CreateTimeArray";
                    field.Type = TType.List;
                    field.ID = 48;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I64, CreateTimeArray.Count));
                        foreach (long _iter201 in CreateTimeArray)
                        {
                            oprot.WriteI64(_iter201);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (PublishTimeArray != null && __isset.PublishTimeArray)
                {
                    field.Name = "PublishTimeArray";
                    field.Type = TType.List;
                    field.ID = 49;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I64, PublishTimeArray.Count));
                        foreach (long _iter202 in PublishTimeArray)
                        {
                            oprot.WriteI64(_iter202);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (CarTypeConfig != null && __isset.CarTypeConfig)
                {
                    field.Name = "CarTypeConfig";
                    field.Type = TType.List;
                    field.ID = 50;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, CarTypeConfig.Count));
                        foreach (int _iter203 in CarTypeConfig)
                        {
                            oprot.WriteI32(_iter203);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (__isset.IsRecommendGL)
                {
                    field.Name = "IsRecommendGL";
                    field.Type = TType.I32;
                    field.ID = 51;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(IsRecommendGL);
                    oprot.WriteFieldEnd();
                }
                if (__isset.IsWarranty)
                {
                    field.Name = "IsWarranty";
                    field.Type = TType.I32;
                    field.ID = 52;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(IsWarranty);
                    oprot.WriteFieldEnd();
                }
                if (WarrantyTypeArray != null && __isset.WarrantyTypeArray)
                {
                    field.Name = "WarrantyTypeArray";
                    field.Type = TType.List;
                    field.ID = 53;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, WarrantyTypeArray.Count));
                        foreach (int _iter204 in WarrantyTypeArray)
                        {
                            oprot.WriteI32(_iter204);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (__isset.IsTop)
                {
                    field.Name = "IsTop";
                    field.Type = TType.I32;
                    field.ID = 54;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(IsTop);
                    oprot.WriteFieldEnd();
                }
                if (__isset.IsActivity)
                {
                    field.Name = "IsActivity";
                    field.Type = TType.I32;
                    field.ID = 55;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(IsActivity);
                    oprot.WriteFieldEnd();
                }
                if (__isset.IsBangmai)
                {
                    field.Name = "IsBangmai";
                    field.Type = TType.I32;
                    field.ID = 56;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(IsBangmai);
                    oprot.WriteFieldEnd();
                }
                if (__isset.IsBangmaiche)
                {
                    field.Name = "IsBangmaiche";
                    field.Type = TType.I32;
                    field.ID = 57;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(IsBangmaiche);
                    oprot.WriteFieldEnd();
                }
                if (__isset.IsShowMr)
                {
                    field.Name = "IsShowMr";
                    field.Type = TType.I32;
                    field.ID = 58;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(IsShowMr);
                    oprot.WriteFieldEnd();
                }
                if (__isset.IsCarId)
                {
                    field.Name = "IsCarId";
                    field.Type = TType.I32;
                    field.ID = 59;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(IsCarId);
                    oprot.WriteFieldEnd();
                }
                if (__isset.IsB2B)
                {
                    field.Name = "IsB2B";
                    field.Type = TType.I32;
                    field.ID = 60;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(IsB2B);
                    oprot.WriteFieldEnd();
                }
                if (__isset.CommonFlag)
                {
                    field.Name = "CommonFlag";
                    field.Type = TType.I32;
                    field.ID = 101;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(CommonFlag);
                    oprot.WriteFieldEnd();
                }
                if (__isset.RequestSource)
                {
                    field.Name = "RequestSource";
                    field.Type = TType.I32;
                    field.ID = 102;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(RequestSource);
                    oprot.WriteFieldEnd();
                }
                if (ReturnFieldArray != null && __isset.ReturnFieldArray)
                {
                    field.Name = "ReturnFieldArray";
                    field.Type = TType.List;
                    field.ID = 103;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, ReturnFieldArray.Count));
                        foreach (string _iter205 in ReturnFieldArray)
                        {
                            oprot.WriteString(_iter205);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (OrderByFieldArray != null && __isset.OrderByFieldArray)
                {
                    field.Name = "OrderByFieldArray";
                    field.Type = TType.List;
                    field.ID = 104;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.String, OrderByFieldArray.Count));
                        foreach (string _iter206 in OrderByFieldArray)
                        {
                            oprot.WriteString(_iter206);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (OrderByIsDESCArray != null && __isset.OrderByIsDESCArray)
                {
                    field.Name = "OrderByIsDESCArray";
                    field.Type = TType.List;
                    field.ID = 105;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Bool, OrderByIsDESCArray.Count));
                        foreach (bool _iter207 in OrderByIsDESCArray)
                        {
                            oprot.WriteBool(_iter207);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (__isset.SortBoostFlag)
                {
                    field.Name = "SortBoostFlag";
                    field.Type = TType.I32;
                    field.ID = 106;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(SortBoostFlag);
                    oprot.WriteFieldEnd();
                }
                if (__isset.PageSize)
                {
                    field.Name = "PageSize";
                    field.Type = TType.I32;
                    field.ID = 107;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(PageSize);
                    oprot.WriteFieldEnd();
                }
                if (__isset.PageIndex)
                {
                    field.Name = "PageIndex";
                    field.Type = TType.I32;
                    field.ID = 108;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(PageIndex);
                    oprot.WriteFieldEnd();
                }
                if (__isset.IsHightLight)
                {
                    field.Name = "IsHightLight";
                    field.Type = TType.Bool;
                    field.ID = 109;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(IsHightLight);
                    oprot.WriteFieldEnd();
                }
                if (__isset.DistanceKm)
                {
                    field.Name = "DistanceKm";
                    field.Type = TType.Double;
                    field.ID = 110;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteDouble(DistanceKm);
                    oprot.WriteFieldEnd();
                }
                if (Location != null && __isset.Location)
                {
                    field.Name = "Location";
                    field.Type = TType.String;
                    field.ID = 111;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Location);
                    oprot.WriteFieldEnd();
                }
                if (__isset.IsCountSearch)
                {
                    field.Name = "IsCountSearch";
                    field.Type = TType.Bool;
                    field.ID = 112;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteBool(IsCountSearch);
                    oprot.WriteFieldEnd();
                }
                if (RequestParametersLog != null && __isset.RequestParametersLog)
                {
                    field.Name = "RequestParametersLog";
                    field.Type = TType.String;
                    field.ID = 113;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(RequestParametersLog);
                    oprot.WriteFieldEnd();
                }
                if (AggrFieldList != null && __isset.AggrFieldList)
                {
                    field.Name = "AggrFieldList";
                    field.Type = TType.String;
                    field.ID = 114;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(AggrFieldList);
                    oprot.WriteFieldEnd();
                }
                if (EnvirStandardArray != null && __isset.EnvirStandardArray)
                {
                    field.Name = "EnvirStandardArray";
                    field.Type = TType.List;
                    field.ID = 201;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, EnvirStandardArray.Count));
                        foreach (int _iter208 in EnvirStandardArray)
                        {
                            oprot.WriteI32(_iter208);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (ConsumptionLowerArray != null && __isset.ConsumptionLowerArray)
                {
                    field.Name = "ConsumptionLowerArray";
                    field.Type = TType.List;
                    field.ID = 202;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Double, ConsumptionLowerArray.Count));
                        foreach (double _iter209 in ConsumptionLowerArray)
                        {
                            oprot.WriteDouble(_iter209);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (ConsumptionHighArray != null && __isset.ConsumptionHighArray)
                {
                    field.Name = "ConsumptionHighArray";
                    field.Type = TType.List;
                    field.ID = 203;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.Double, ConsumptionHighArray.Count));
                        foreach (double _iter210 in ConsumptionHighArray)
                        {
                            oprot.WriteDouble(_iter210);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (OilTypeArray != null && __isset.OilTypeArray)
                {
                    field.Name = "OilTypeArray";
                    field.Type = TType.List;
                    field.ID = 204;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, OilTypeArray.Count));
                        foreach (int _iter211 in OilTypeArray)
                        {
                            oprot.WriteI32(_iter211);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (EngineLocationArray != null && __isset.EngineLocationArray)
                {
                    field.Name = "EngineLocationArray";
                    field.Type = TType.List;
                    field.ID = 205;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, EngineLocationArray.Count));
                        foreach (int _iter212 in EngineLocationArray)
                        {
                            oprot.WriteI32(_iter212);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (BodyDoorsLowerArray != null && __isset.BodyDoorsLowerArray)
                {
                    field.Name = "BodyDoorsLowerArray";
                    field.Type = TType.List;
                    field.ID = 206;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, BodyDoorsLowerArray.Count));
                        foreach (int _iter213 in BodyDoorsLowerArray)
                        {
                            oprot.WriteI32(_iter213);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (BodyDoorsHighArray != null && __isset.BodyDoorsHighArray)
                {
                    field.Name = "BodyDoorsHighArray";
                    field.Type = TType.List;
                    field.ID = 207;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, BodyDoorsHighArray.Count));
                        foreach (int _iter214 in BodyDoorsHighArray)
                        {
                            oprot.WriteI32(_iter214);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (SeatNumLowerArray != null && __isset.SeatNumLowerArray)
                {
                    field.Name = "SeatNumLowerArray";
                    field.Type = TType.List;
                    field.ID = 208;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, SeatNumLowerArray.Count));
                        foreach (int _iter215 in SeatNumLowerArray)
                        {
                            oprot.WriteI32(_iter215);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (SeatNumHighArray != null && __isset.SeatNumHighArray)
                {
                    field.Name = "SeatNumHighArray";
                    field.Type = TType.List;
                    field.ID = 209;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, SeatNumHighArray.Count));
                        foreach (int _iter216 in SeatNumHighArray)
                        {
                            oprot.WriteI32(_iter216);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (__isset.IsWagon)
                {
                    field.Name = "IsWagon";
                    field.Type = TType.I32;
                    field.ID = 210;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(IsWagon);
                    oprot.WriteFieldEnd();
                }
                if (DriveTypeArray != null && __isset.DriveTypeArray)
                {
                    field.Name = "DriveTypeArray";
                    field.Type = TType.List;
                    field.ID = 211;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, DriveTypeArray.Count));
                        foreach (int _iter217 in DriveTypeArray)
                        {
                            oprot.WriteI32(_iter217);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (CsBodyFormArray != null && __isset.CsBodyFormArray)
                {
                    field.Name = "CsBodyFormArray";
                    field.Type = TType.List;
                    field.ID = 212;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, CsBodyFormArray.Count));
                        foreach (int _iter218 in CsBodyFormArray)
                        {
                            oprot.WriteI32(_iter218);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                if (CarLevelSecondArray != null && __isset.CarLevelSecondArray)
                {
                    field.Name = "CarLevelSecondArray";
                    field.Type = TType.List;
                    field.ID = 213;
                    oprot.WriteFieldBegin(field);
                    {
                        oprot.WriteListBegin(new TList(TType.I32, CarLevelSecondArray.Count));
                        foreach (int _iter219 in CarLevelSecondArray)
                        {
                            oprot.WriteI32(_iter219);
                        }
                        oprot.WriteListEnd();
                    }
                    oprot.WriteFieldEnd();
                }
                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            StringBuilder __sb = new StringBuilder("DTOSearchCondition(");
            bool __first = true;
            if (__isset.CommonFlag)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("CommonFlag: ");
                __sb.Append(CommonFlag);
            }
            if (__isset.RequestSource)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("RequestSource: ");
                __sb.Append(RequestSource);
            }
            if (ReturnFieldArray != null && __isset.ReturnFieldArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("ReturnFieldArray: ");
                __sb.Append(ReturnFieldArray);
            }
            if (OrderByFieldArray != null && __isset.OrderByFieldArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("OrderByFieldArray: ");
                __sb.Append(OrderByFieldArray);
            }
            if (OrderByIsDESCArray != null && __isset.OrderByIsDESCArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("OrderByIsDESCArray: ");
                __sb.Append(OrderByIsDESCArray);
            }
            if (__isset.SortBoostFlag)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("SortBoostFlag: ");
                __sb.Append(SortBoostFlag);
            }
            if (__isset.PageSize)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("PageSize: ");
                __sb.Append(PageSize);
            }
            if (__isset.PageIndex)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("PageIndex: ");
                __sb.Append(PageIndex);
            }
            if (__isset.IsHightLight)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("IsHightLight: ");
                __sb.Append(IsHightLight);
            }
            if (__isset.DistanceKm)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("DistanceKm: ");
                __sb.Append(DistanceKm);
            }
            if (Location != null && __isset.Location)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Location: ");
                __sb.Append(Location);
            }
            if (__isset.IsCountSearch)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("IsCountSearch: ");
                __sb.Append(IsCountSearch);
            }
            if (RequestParametersLog != null && __isset.RequestParametersLog)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("RequestParametersLog: ");
                __sb.Append(RequestParametersLog);
            }
            if (AggrFieldList != null && __isset.AggrFieldList)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("AggrFieldList: ");
                __sb.Append(AggrFieldList);
            }
            if (UcarIdArray != null && __isset.UcarIdArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("UcarIdArray: ");
                __sb.Append(UcarIdArray);
            }
            if (SiteId != null && __isset.SiteId)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("SiteId: ");
                __sb.Append(SiteId);
            }
            if (UcarStatusArray != null && __isset.UcarStatusArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("UcarStatusArray: ");
                __sb.Append(UcarStatusArray);
            }
            if (NoUcarIdArray != null && __isset.NoUcarIdArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("NoUcarIdArray: ");
                __sb.Append(NoUcarIdArray);
            }
            if (__isset.IsAuthenticated)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("IsAuthenticated: ");
                __sb.Append(IsAuthenticated);
            }
            if (__isset.Source)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("Source: ");
                __sb.Append(Source);
            }
            if (CarLevelArray != null && __isset.CarLevelArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("CarLevelArray: ");
                __sb.Append(CarLevelArray);
            }
            if (UserIdArray != null && __isset.UserIdArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("UserIdArray: ");
                __sb.Append(UserIdArray);
            }
            if (NoUserIdArray != null && __isset.NoUserIdArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("NoUserIdArray: ");
                __sb.Append(NoUserIdArray);
            }
            if (UcarSerialNumberArray != null && __isset.UcarSerialNumberArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("UcarSerialNumberArray: ");
                __sb.Append(UcarSerialNumberArray);
            }
            if (KeyWord != null && __isset.KeyWord)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("KeyWord: ");
                __sb.Append(KeyWord);
            }
            if (MainBrandArray != null && __isset.MainBrandArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("MainBrandArray: ");
                __sb.Append(MainBrandArray);
            }
            if (BrandArray != null && __isset.BrandArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("BrandArray: ");
                __sb.Append(BrandArray);
            }
            if (CarSerialArray != null && __isset.CarSerialArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("CarSerialArray: ");
                __sb.Append(CarSerialArray);
            }
            if (CarIDArray != null && __isset.CarIDArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("CarIDArray: ");
                __sb.Append(CarIDArray);
            }
            if (GearBoxTypeArray != null && __isset.GearBoxTypeArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("GearBoxTypeArray: ");
                __sb.Append(GearBoxTypeArray);
            }
            if (ColorArray != null && __isset.ColorArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("ColorArray: ");
                __sb.Append(ColorArray);
            }
            if (__isset.CarSource1L)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("CarSource1L: ");
                __sb.Append(CarSource1L);
            }
            if (__isset.PictureCount)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("PictureCount: ");
                __sb.Append(PictureCount);
            }
            if (BigAreaIdArray != null && __isset.BigAreaIdArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("BigAreaIdArray: ");
                __sb.Append(BigAreaIdArray);
            }
            if (ProvinceIdArray != null && __isset.ProvinceIdArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("ProvinceIdArray: ");
                __sb.Append(ProvinceIdArray);
            }
            if (CityIdArray != null && __isset.CityIdArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("CityIdArray: ");
                __sb.Append(CityIdArray);
            }
            if (NoCityIdArray != null && __isset.NoCityIdArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("NoCityIdArray: ");
                __sb.Append(NoCityIdArray);
            }
            if (RelateCityArray != null && __isset.RelateCityArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("RelateCityArray: ");
                __sb.Append(RelateCityArray);
            }
            if (PriceLowerArray != null && __isset.PriceLowerArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("PriceLowerArray: ");
                __sb.Append(PriceLowerArray);
            }
            if (PriceHighArray != null && __isset.PriceHighArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("PriceHighArray: ");
                __sb.Append(PriceHighArray);
            }
            if (CPriceLowerArray != null && __isset.CPriceLowerArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("CPriceLowerArray: ");
                __sb.Append(CPriceLowerArray);
            }
            if (CPriceHighArray != null && __isset.CPriceHighArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("CPriceHighArray: ");
                __sb.Append(CPriceHighArray);
            }
            if (B2BPriceLowerArray != null && __isset.B2BPriceLowerArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("B2BPriceLowerArray: ");
                __sb.Append(B2BPriceLowerArray);
            }
            if (B2BPriceHighArray != null && __isset.B2BPriceHighArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("B2BPriceHighArray: ");
                __sb.Append(B2BPriceHighArray);
            }
            if (CarAgeLowerArray != null && __isset.CarAgeLowerArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("CarAgeLowerArray: ");
                __sb.Append(CarAgeLowerArray);
            }
            if (CarAgeHighArray != null && __isset.CarAgeHighArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("CarAgeHighArray: ");
                __sb.Append(CarAgeHighArray);
            }
            if (ExhaustLevelLowerArray != null && __isset.ExhaustLevelLowerArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("ExhaustLevelLowerArray: ");
                __sb.Append(ExhaustLevelLowerArray);
            }
            if (ExhaustLevelHighArray != null && __isset.ExhaustLevelHighArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("ExhaustLevelHighArray: ");
                __sb.Append(ExhaustLevelHighArray);
            }
            if (ExhaustLevelArray != null && __isset.ExhaustLevelArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("ExhaustLevelArray: ");
                __sb.Append(ExhaustLevelArray);
            }
            if (DrivingMileageLowerArray != null && __isset.DrivingMileageLowerArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("DrivingMileageLowerArray: ");
                __sb.Append(DrivingMileageLowerArray);
            }
            if (DrivingMileageHighArray != null && __isset.DrivingMileageHighArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("DrivingMileageHighArray: ");
                __sb.Append(DrivingMileageHighArray);
            }
            if (CountryArray != null && __isset.CountryArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("CountryArray: ");
                __sb.Append(CountryArray);
            }
            if (__isset.SuperiorId)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("SuperiorId: ");
                __sb.Append(SuperiorId);
            }
            if (BrandAttrArray != null && __isset.BrandAttrArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("BrandAttrArray: ");
                __sb.Append(BrandAttrArray);
            }
            if (__isset.UserType)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("UserType: ");
                __sb.Append(UserType);
            }
            if (__isset.IsNeglect)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("IsNeglect: ");
                __sb.Append(IsNeglect);
            }
            if (__isset.IsVideo)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("IsVideo: ");
                __sb.Append(IsVideo);
            }
            if (__isset.IsFirstPicTrue)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("IsFirstPicTrue: ");
                __sb.Append(IsFirstPicTrue);
            }
            if (__isset.IsDealerRecommend)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("IsDealerRecommend: ");
                __sb.Append(IsDealerRecommend);
            }
            if (CarSourceTypeArray != null && __isset.CarSourceTypeArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("CarSourceTypeArray: ");
                __sb.Append(CarSourceTypeArray);
            }
            if (CarYearArray != null && __isset.CarYearArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("CarYearArray: ");
                __sb.Append(CarYearArray);
            }
            if (CreateTimeArray != null && __isset.CreateTimeArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("CreateTimeArray: ");
                __sb.Append(CreateTimeArray);
            }
            if (PublishTimeArray != null && __isset.PublishTimeArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("PublishTimeArray: ");
                __sb.Append(PublishTimeArray);
            }
            if (CarTypeConfig != null && __isset.CarTypeConfig)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("CarTypeConfig: ");
                __sb.Append(CarTypeConfig);
            }
            if (__isset.IsRecommendGL)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("IsRecommendGL: ");
                __sb.Append(IsRecommendGL);
            }
            if (__isset.IsWarranty)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("IsWarranty: ");
                __sb.Append(IsWarranty);
            }
            if (WarrantyTypeArray != null && __isset.WarrantyTypeArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("WarrantyTypeArray: ");
                __sb.Append(WarrantyTypeArray);
            }
            if (__isset.IsTop)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("IsTop: ");
                __sb.Append(IsTop);
            }
            if (__isset.IsActivity)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("IsActivity: ");
                __sb.Append(IsActivity);
            }
            if (__isset.IsBangmai)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("IsBangmai: ");
                __sb.Append(IsBangmai);
            }
            if (__isset.IsBangmaiche)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("IsBangmaiche: ");
                __sb.Append(IsBangmaiche);
            }
            if (__isset.IsShowMr)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("IsShowMr: ");
                __sb.Append(IsShowMr);
            }
            if (__isset.IsCarId)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("IsCarId: ");
                __sb.Append(IsCarId);
            }
            if (__isset.IsB2B)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("IsB2B: ");
                __sb.Append(IsB2B);
            }
            if (EnvirStandardArray != null && __isset.EnvirStandardArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("EnvirStandardArray: ");
                __sb.Append(EnvirStandardArray);
            }
            if (ConsumptionLowerArray != null && __isset.ConsumptionLowerArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("ConsumptionLowerArray: ");
                __sb.Append(ConsumptionLowerArray);
            }
            if (ConsumptionHighArray != null && __isset.ConsumptionHighArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("ConsumptionHighArray: ");
                __sb.Append(ConsumptionHighArray);
            }
            if (OilTypeArray != null && __isset.OilTypeArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("OilTypeArray: ");
                __sb.Append(OilTypeArray);
            }
            if (EngineLocationArray != null && __isset.EngineLocationArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("EngineLocationArray: ");
                __sb.Append(EngineLocationArray);
            }
            if (BodyDoorsLowerArray != null && __isset.BodyDoorsLowerArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("BodyDoorsLowerArray: ");
                __sb.Append(BodyDoorsLowerArray);
            }
            if (BodyDoorsHighArray != null && __isset.BodyDoorsHighArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("BodyDoorsHighArray: ");
                __sb.Append(BodyDoorsHighArray);
            }
            if (SeatNumLowerArray != null && __isset.SeatNumLowerArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("SeatNumLowerArray: ");
                __sb.Append(SeatNumLowerArray);
            }
            if (SeatNumHighArray != null && __isset.SeatNumHighArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("SeatNumHighArray: ");
                __sb.Append(SeatNumHighArray);
            }
            if (__isset.IsWagon)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("IsWagon: ");
                __sb.Append(IsWagon);
            }
            if (DriveTypeArray != null && __isset.DriveTypeArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("DriveTypeArray: ");
                __sb.Append(DriveTypeArray);
            }
            if (CsBodyFormArray != null && __isset.CsBodyFormArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("CsBodyFormArray: ");
                __sb.Append(CsBodyFormArray);
            }
            if (CarLevelSecondArray != null && __isset.CarLevelSecondArray)
            {
                if (!__first) { __sb.Append(", "); }
                __first = false;
                __sb.Append("CarLevelSecondArray: ");
                __sb.Append(CarLevelSecondArray);
            }
            __sb.Append(")");
            return __sb.ToString();
        }

    }

}
